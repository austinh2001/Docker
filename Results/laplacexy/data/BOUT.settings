append = false		# type: bool, doc: Add output data to existing (dump) files?
async_send = false		# type: bool, doc: Whether to use asyncronous MPI sends
datadir = data		# type: string
dump_format = nc		# type: string
incintshear = false		# type: bool
mxg = 2		# type: int, doc: Number of guard cells on each side in X
myg = 2		# type: int, doc: Number of guard cells on each side in Y
non_uniform = true		# type: bool
optionfile = BOUT.inp		# type: string
periodicx = false		# type: bool, doc: Make grid periodic in X?
settingsfile = BOUT.settings		# type: string
twistshift = false		# type: bool, doc: Apply a Twist-Shift boundary using ShiftAngle?
zmax = 1		# type: BoutReal
zmin = 0		# type: BoutReal

[input]
max_recursion_depth = 0		# type: string, doc: Maximum recursion depth allowed in expressions. 0 = no recursion; -1 = unlimited
transform_from_field_aligned = true		# type: bool

[laplacexy]
atol = 1e-10		# type: BoutReal, doc: Absolute tolerance. The solution is considered converged if |Ax-b| < max( rtol * |b| , atol )
core_bndry_dirichlet = false		# type: bool
direct = false		# type: bool, doc: Use a direct LU solver
dtol = 1000		# type: BoutReal, doc: The solution is considered diverged if |Ax-b| > dtol * |b|
finite_volume = true		# type: bool, doc: Use finite volume rather than finite difference discretisation.
include_y_derivs = true		# type: bool, doc: Include Y derivatives in operator to invert?
ksptype = gmres		# type: string, doc: KSP solver type
maxits = 100000		# type: int, doc: Maximum iterations
pctype = jacobi		# type: string, doc: Preconditioner type
rhs = sin(2*pi*x)*sin(y)
rtol = 1e-05		# type: BoutReal, doc: Relative tolerance
y_bndry = neumann		# type: string

[mesh]
calcparallelslices_on_communicate = true		# type: bool
dx = 1.0
dy = 1.0
dz = 1.0
extrapolate_x = false		# type: bool
extrapolate_y = false		# type: bool
include_corner_cells = true		# type: bool, doc: Communicate corner guard and boundary cells. Can be set to false if you are sure that you will not need these cells, for mixed derivatives D2DXDY (or anything else), for example if your grid has orthogonal x- and y-directions.  This might slightly reduce communication time.
maxregionblocksize = 64		# type: int
nx = 20
ny = 32
nz = 1
staggergrids = false		# type: bool
symmetricglobalx = true		# type: bool
symmetricglobaly = true		# type: bool
type = bout		# type: string

[mesh:ddz]
fft_filter = 0		# type: BoutReal

[mesh:paralleltransform]
type = identity		# type: string

[output]
enabled = true		# type: bool
floats = false		# type: bool
flush = true		# type: bool
flushfrequency = 1		# type: int
guards = true		# type: bool
init_missing = false		# type: bool
openclose = true		# type: bool
parallel = false		# type: bool
shiftinput = false		# type: bool
shiftoutput = false		# type: bool

[run]
finished = Tue Oct 18 06:52:24 2022
		# not used , from: 
revision = 4cee87c3c0173fece6e0651afac52e90ab815699		# not used , from: 
started = Tue Oct 18 06:52:23 2022
		# not used , from: 
version = 5.0.0-alpha		# not used , from: 
